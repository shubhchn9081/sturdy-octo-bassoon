Got it. I’ll create a comprehensive prompt that outlines the full game logic, user interface structure, multiplier/probability slider behavior, and mobile responsiveness for your Dice Trading game modeled on the mechanics you've described.

I’ll let you know as soon as it's ready.


# Dice Trading Game Implementation Plan

## Overview

This document outlines the specifications for a web-based **Dice Trading** game inspired by Turbo Games. The game combines a simple dice roll mechanic with a trading-style interface. A line chart displays historical dice outcomes, a vertical **Y-axis slider** lets the player select a range of winning numbers, and a dynamic risk model adjusts the payout multiplier based on the size of that range. The implementation will use a simulated random dice roll (no provably fair cryptography) for simplicity. The focus is on creating a responsive, intuitive front-end that can be handed to a front-end engineer for development.

## Game Logic & Mechanics

* **Dice Roll:** Each round, the game generates a random number between 0 and 100 (inclusive). For simplicity, you can treat this as an integer from 0–99 (100 possible outcomes) or 0–100 inclusive (101 outcomes) – in either case, the logic should ensure uniform random distribution.
* **Selecting a Range:** The player defines a **winning range** on the 0–100 scale by adjusting a vertical slider (e.g. setting a minimum and maximum value). The size of this range (as a percentage of the full 0–100 span) determines the probability of winning. A smaller range means a lower win probability but a higher reward (riskier bet), while a larger range means higher chance to win but lower payout.
* **Win Condition:** After the player places a bet, one dice number is rolled. If the outcome falls **within the player's selected range (inclusive of the boundaries)**, the player wins that round; if the outcome is outside the range, the player loses. For example, if the selected range is 20–30 and the dice result is 25, that is a win. If the result is 87 (outside 20–30), it’s a loss.
* **Multiplier Calculation:** The payout **multiplier** is dynamically calculated based on the size of the selected range. In general, multiplier = `100 / (size of selected range in %)` (assuming 100 possible outcomes for 100%). For instance, selecting a 20% range yields roughly a 5× multiplier; a 5% range yields \~20×. The smaller the range, the larger this multiplier. (If using 0–100 inclusive, adjust the formula slightly to use 100% as the full range for approximation.)
* **Payout Outcome:** If the player wins, their payout = **bet amount × multiplier**. If they lose, the payout is 0 (they lose their bet). For example, a \$10 bet on a 10% range (10× multiplier) would return \$100 on a win, or \$0 on a loss. The game should display the potential win amount before the bet is placed (based on current slider selection) and the actual outcome after the roll.
* **Historical Results Tracking:** Each round’s result is plotted on a **line chart** for visualization. The dice outcome becomes a new data point on the graph (with the Y-value equal to the rolled number). The X-axis will increment each round (it can represent the round number or actual timestamp of the roll). This creates a running history of results that the player can see at a glance.

## Gameplay Flow

1. **Range Selection:** The player adjusts the vertical slider to choose a desired range of winning numbers on the 0–100 scale. As they do this, the UI updates the win chance (percentage of the 0–100 covered by the range) and the corresponding multiplier and potential payout.
2. **Bet Placement:** The player enters a bet amount (using an input field and/or +/− buttons) in the right panel. The current multiplier and win chance based on the selected range are displayed, so the player knows the risk/reward.
3. **Place Bet:** When ready, the player clicks the **"Place Bet"** button. At this moment, the betting controls may disable to prevent changes mid-round. The game will then simulate the dice roll.
4. **Dice Roll Simulation:** The system generates a random number from 0–100. (In an actual implementation this could be a secure RNG call; for this controlled simulation, `Math.random()` or a similar pseudo-RNG is sufficient.)
5. **Result Reveal:** The newly rolled number is revealed to the player. This can be visualized by an animation on the chart (see Graph Display below) and/or a textual indicator of the rolled value. The selected slider range can also be highlighted to show whether the result falls inside it.

   * If the outcome is **within the chosen range**: it's a **WIN**. The calculated payout (bet × multiplier) is awarded. The UI should clearly indicate a win (e.g. highlighting the result in green, showing a “Win” message with the payout amount, etc.).
   * If the outcome is **outside the range**: it's a **LOSS**. The player loses their bet (payout 0). Indicate this clearly as well (e.g. red highlight or “Loss” message).
6. **Update Graph & UI:** The result is added to the line chart as the latest data point. The line chart animates to draw the line from the previous point to the new point, emphasizing the latest result. All prior points on the graph remain static (only the new segment animates for the reveal). The right-panel information (balance, if tracked, or just a result message) updates accordingly.
7. **Next Round:** The player can adjust the slider again or keep the same range, modify the bet if desired, and press "Place Bet" for the next round. The interface remains interactive between rounds, allowing the cycle to repeat. No automatic rounds are run – each is triggered by the user.

## User Interface Requirements

The layout consists of three primary components: the **Graph Display**, the **Y-Axis Range Slider** (on the left side), and the **Right Panel** for info and controls. The design should resemble a trading dashboard, with the graph and slider on the left side by side, and control panel on the right. All elements should update in real-time as the player interacts. Below is a breakdown of each UI element and its functionality:

### Graph Display (Historical Results Chart)

* **Chart Type & Axes:** Use a **line chart** to plot the outcomes of each dice roll in sequence. The X-axis represents the progression of rounds (it can simply be round count 1, 2, 3, ... or actual time stamps for when rounds occurred). The Y-axis spans from 0 to 100, corresponding to all possible dice results. The graph should include labels or a scale on the Y-axis (and X-axis as needed) for context.
* **Data Plotting:** Each dice result is plotted as a point on the chart, and consecutive points are connected by a line. This creates a visual “mountain range” or stock-chart-like line showing how results vary over time. For example, if the first roll is 45 and the second is 80, the chart will have a line rising from 45 up to 80 at the second tick. All previously rolled points remain visible as part of the line history.
* **Animation of New Results:** Only the **latest point and connecting line segment** should animate when a new result comes in. When the “Place Bet” button is pressed and the new dice number is generated, animate the drawing of the line from the last point to the new point. This can be a quick animation (e.g. 0.5s to 1s) to draw the line upwards or downwards to the new value, visually simulating a real-time market jump. Previous segments of the line remain static (no retroactive animation).
* **Point Highlighting:** Emphasize the newest data point so the player can easily spot the latest result. For example, you might draw a small filled circle or marker at the current point. Optionally, use a distinct color or glow for the newest point, especially if it signifies win/loss (e.g. green dot for a win, red for a loss). This marker can fade to the default color when a new round starts, ensuring only the latest point is highlighted at any time.
* **Chart Styling:** Keep the chart area clean and easily readable. Use a contrasting line color against the background. If using a dark theme (common in trading UIs), a light or neon-colored line could work; for light backgrounds, use a bold dark line. Gridlines are optional but could be included subtly to help gauge values. The chart’s container should be sized to occupy the left side of the screen (with the slider adjacent). It should also be responsive (see Mobile Responsiveness section).
* **Performance:** Ensure the chart can update smoothly each round without lag. Since the data points could accumulate, consider limiting the number of points shown (for example, show the last N results) or implement a sliding window if the list grows large. The chart library chosen (see Tech Stack) should support dynamic data updates and possibly animations for the new data.

### Vertical Range Slider (Y-Axis Control)

* **Slider Functionality:** The slider is a **vertical range selector** aligned with the chart’s Y-axis (0 at bottom, 100 at top). It has two draggable handles – one for the lower bound and one for the upper bound of the desired range – allowing the player to select a continuous segment of the 0–100 scale. The segment between the handles represents the **winning range**. For example, the player might drag the handles to create a range from 30 to 70; this means they are betting that the dice will roll between 30 and 70.
* **Real-Time Updates:** As the player moves the slider handles, update the related metrics instantly in the UI:

  * **Selected Range Display:** Visually highlight the portion of the slider track between the two handles (e.g. a filled bar or a different color background on that segment). Also show the numeric values of the min and max of the range (perhaps as small labels next to the handles or in a tooltip) so the user knows exactly what range they’ve set.
  * **Win Chance:** Calculate the size of the range as a percentage of 0–100 and display it as the “Win Chance”. For instance, a range of width 20 (e.g. 30–50) equates to a 20% win chance. This should update live as the range changes.
  * **Multiplier:** Simultaneously update the multiplier value = `100 / (percentage of range)` (or an equivalent formula based on range size). For a 20% range, the multiplier would show \~5×; for a 5% range, \~20×, etc. If needed, format this multiplier to a reasonable number of decimal places. This live feedback lets the user see how risk and reward trade off as they adjust the slider.
  * **Risk Meter:** (Tied to the Right Panel’s gauge) The slider movement should also reflect on the risk gauge – smaller ranges (high risk) push the gauge into the “red” zone, while larger ranges (safer bets) move it into “green”. This linkage provides intuitive feedback.
* **Slider Component Details:** The slider should be easy to manipulate on both desktop (mouse drag) and mobile (touch drag). Each handle must be large enough (or have enough padding) to be finger-friendly. The component should support **vertical orientation** and **range with two handles**. You may use a pre-built React slider library that supports these features (for example, `rc-slider` or `react-range` or even the slider from Material-UI, configured vertically). If using a library, enable vertical mode and provide the range \[0,100] as the domain. Style the slider via Tailwind/custom CSS to match the overall design (e.g., a thicker track, custom colors for the filled range vs unfilled).
* **Alignment with Graph:** Place the slider along the left side of the graph area so that its scale aligns with the chart’s Y-axis. This way, the selected range on the slider directly corresponds to a horizontal band across the graph. (For example, if the user selects 30–70, one can visually see that band on the graph’s Y-axis range.) If possible, visually align the slider’s tick marks or labels with the chart’s Y-axis labels for a cohesive look. This might involve rendering 0–100 labels on the slider or relying on the chart’s axis.
* **Boundary Conditions:** Ensure the slider handles cannot cross (the lower bound cannot exceed the upper bound). Also define a minimum gap or step if needed (for example, maybe the smallest range allowed is 1 unit or 1% so that multiplier isn’t infinite). The slider can allow the full span (0 to 100) as a valid selection, which would result in a 100% win chance and a multiplier of \~1× (essentially no gain/no loss scenario). It’s up to design whether to allow the full 100% range – if allowed, treat it as a valid but trivial bet (player would always get their bet back).

### Right Panel (Risk Info and Bet Controls)

This panel on the right side of the layout provides feedback on the chosen risk level and allows the player to input bets and execute the roll. It should be clearly separated from the graph/slider area, possibly with a contrasting background or a bordered container. Key elements of the right panel include:

* **Risk Meter Gauge:** At the top of the panel, include a **visual risk indicator** – for example, a semi-circular gauge or dial. This gauge represents the risk level corresponding to the current slider selection:

  * The gauge could be color-coded from green (low risk, large range selected) through yellow (medium risk) to red (high risk, tiny range selected).
  * The needle or filled arc of the gauge moves in real time as the player adjusts the slider. If the player selects a narrower range (higher risk), the gauge moves toward the red end. For a broad range (safer bet), it points toward green.
  * Implement this gauge either by using an existing React component/library (e.g. `react-gauge-chart` for a simple D3-based gauge, or a small SVG to draw an arc that changes based on risk percent). The gauge’s input value can be the inverse of the win chance (i.e. risk = 100% – winChance%) or simply tied to the multiplier level. The exact mapping can be linear (e.g., 100% win chance = 0% risk (full green), 1% win chance = \~100% risk (full red)). This is mostly a UI feedback element to make the risk level feel tangible.
  * Label the gauge appropriately (perhaps with the word "Risk" or an icon) and possibly include min/max markers (Min, Max or Safe, Risky ends).
* **Dynamic Text Displays:** Below or alongside the gauge, display key calculated values:

  * **Win Chance (%):** Show the probability of winning with the current range (e.g. "Win Chance: 20%"). This should update live as the slider moves.
  * **Multiplier (×):** Show the current multiplier (e.g. "Payout Multiplier: 5×"). This is effectively the inverse of the win chance as described. Update it live. Formatting note: if the multiplier is not an integer (which it often won’t be, except for specific percentages), round or format it to 2 decimal places for clarity (e.g. 5.00× or 5.2×).
  * **Potential Payout:** If the player has entered a bet amount, you can display the potential win in currency. For example, "Potential Payout: \$50" if bet is \$10 and multiplier is 5×. This gives immediate feedback on what’s at stake. Update this whenever the bet or multiplier changes. If no bet is entered yet, this can remain blank or show "\$0".
    These text displays should be styled for quick readability (maybe use larger font or bold for the numeric parts).
* **Bet Amount Input:** Provide an input control for the player to set their bet amount:

  * Use a numeric input field (with appropriate validation to allow only numbers within a sensible range).
  * Alongside, include **increment/decrement buttons** (e.g. + and –) to let the user quickly adjust the bet by preset steps. The step size could be, for example, 1 unit or 0.1, depending on the currency and typical bet sizes. Make these buttons large enough for easy tapping.
  * Optionally, provide quick preset buttons (like "Min", "Max", or common bet values) if that fits the design, but not required.
  * The bet input should default to some minimum (e.g. 1 currency unit) and enforce a max if desired (the prompt suggests maybe up to \$100 or similar from the Turbo Games info, but you can define what makes sense or make it configurable).
* **Place Bet Button:** A prominent **"Place Bet"** button initiates the round. This button should stand out (use a bright color or high contrast) since it’s the primary action. When clicked:

  * It triggers the dice roll simulation and temporarily can disable itself (and optionally disable the slider and bet input) until the result is resolved, to prevent mid-animation changes.
  * The button text could briefly change to something like "Rolling..." during the animation for feedback, then maybe back to "Place Bet" or to "Again" after the outcome, depending on design preference. (At minimum, ensure the user knows a roll is in progress, perhaps by disabling or a loading indicator).
* **Result Feedback:** Although the main result visualization is on the chart, the right panel can also textually display the outcome after each round:

  * For example, under the button or in a small status area, show "🎲 Rolled 45 – You Win!" or "🎲 Rolled 72 – You Lose" in red/green text accordingly. This provides immediate clarity on what number came up and whether it was a win.
  * This text can reset or disappear when the next bet is placed, or remain until overwritten by the next result.
* **Layout & Styling:** Arrange the right panel elements in a logical order: Risk gauge at top (since it’s tied to slider which is on the left), then win chance/multiplier info, then bet input, and finally the Place Bet button at the bottom (since that’s the action). Use spacing and dividers as needed to group these sections. For example, group the gauge and percentages in one card/section, and the bet controls (amount and button) in another. Use Tailwind CSS utility classes to quickly style margins, padding, font sizes, and colors. Ensure the panel has adequate width to fit all elements without feeling cramped, but also not too wide on large screens (you want the main focus to remain the graph area).

## Mobile Responsiveness

The entire interface must adapt to smaller screens (tablets and smartphones) gracefully. Use a mobile-first approach with Tailwind or CSS media queries to adjust the layout. Key responsive behaviors include:

* **Stacked Layout:** On narrow screens, switch to a vertical stacking of sections. Instead of the **side-by-side** layout (slider+graph on left and info panel on right), the components should stack in one column. For example:

  1. The graph (with slider) could appear at the top of the screen.
  2. The betting controls and info panel would then appear below the graph.
     This ensures all elements can be seen without horizontal scrolling.
* **Graph & Slider on Mobile:** The graph may need to shrink or become more compact on mobile. Maintain the vertical slider’s functionality:

  * The slider should **remain vertical** even on mobile (do not switch it to horizontal, as the game’s design revolves around a vertical probability slider). However, you might reposition it if needed. One approach: place the slider immediately to the left of the graph as on desktop, but if the screen is very narrow, the slider and graph together might not fit side-by-side. In that case, consider overlaying the slider on the graph’s left edge or giving the slider its own small column. Another approach is to put the slider above or below the graph in the DOM but still visually position it absolutely on the graph’s left side. Choose a solution that keeps it usable: users should be able to drag it without accidentally scrolling the page.
  * Ensure the graph’s text (axis labels, etc.) are still readable on a small screen. You might hide some less critical labels or make the chart taller relative to width for clarity.
* **Touch-Friendly Controls:** All interactive elements should enlarge or adjust for touch:

  * Increase the size of slider handles and the spacing around them on mobile so that a finger can easily drag them.
  * Make the **Place Bet** button full-width or almost full-width on mobile to create a large tap target. The same goes for the +/− buttons for the bet amount – ensure they have adequate size and spacing.
  * Use slightly larger font sizes for important info (win chance, payout) on mobile so they’re easily glanceable.
* **Collapsing/Stacking Panels:** The right info panel content (gauge, text, inputs) can also stretch full width on mobile. For example, the gauge could be centered and smaller, with the win chance and multiplier text below it. The bet amount input and button can be on one line or stacked (e.g., input above the button) if space is tight. Use Tailwind’s grid or flex utilities to rearrange these for small screens.
* **No Horizontal Scrolling:** The UI should fit within the viewport width at all times. Test on common device widths (e.g. 320px wide screens up to tablets) to ensure nothing overflows. The graph might need to be responsive (possibly using a percentage width or a max-width) and the chart library should handle redrawing on resize if necessary.
* **Usability:** Test the interactions on a mobile emulator or device. The slider especially is crucial – verify that dragging it is smooth and not interfering with the page scroll (you may need to prevent touchmove on the page when interacting with the slider component). Also check that tapping on the graph (if it has any tooltip behavior) doesn’t cause issues. The design should remain intuitive: even on a small screen, the user should clearly see that they need to set the range, enter a bet, and hit play.

## Tech Stack & Libraries

We will use a modern front-end stack to build the game, ensuring performance and ease of development:

* **React & TypeScript:** Use React for the UI framework, written in TypeScript. This provides a modular, component-based structure and type safety for more robust code. React’s state management (via hooks or context) will handle dynamic updates like slider movements, chart data updates, etc. The project structure can be a simple CRA (Create React App) or Vite setup with TypeScript. Each major UI part (chart, slider, panel) should be its own component for clarity and reusability.
* **Tailwind CSS:** Utilize Tailwind for styling. Tailwind’s utility classes will make it easy to implement the responsive design, spacing, and colors described without writing a lot of custom CSS. It also makes it straightforward to apply conditional styling (e.g. different layouts on mobile vs desktop via responsive prefixes). Ensure to configure Tailwind with a suitable color palette (especially for the risk gauge colors, win/lose colors, etc.). If needed, a small amount of custom CSS or styled-components can supplement for chart-specific styling or if a library needs custom styles.
* **Chart Library:** For the line graph, choose a library that supports React and can handle dynamic updates:

  * **Chart.js (via react-chartjs-2)** is a good option: it’s canvas-based (performant for many points), and supports animations. It can draw line charts easily and you can customize the animation of adding a new data point. Chart.js would allow an animation for the new data insert (for example, by updating the dataset and using their animation config). It’s also responsive and can redraw when the parent container resizes.
  * **Recharts** is another option (SVG-based). It integrates well with React and has a simple API for line charts. Recharts can animate chart on initial render and offers some support for transitions on data update (though may require additional props for explicit animations on updates). If using Recharts, ensure the `LineChart` component is given a fixed width/height or uses a responsive container. Note: For a large number of points, Chart.js or a canvas-based solution might perform better than Recharts’ SVG approach, but for moderate history lengths either is fine.
  * In either case, structure the chart component to accept a data array of past results. When a new result comes in, update the data array (e.g., keep in state) and re-render the chart. Use the library’s capabilities to highlight the latest point (e.g., in Chart.js you might add a custom point style for the last element).
  * Also consider chart configuration: disable heavy features we don’t need (e.g., tooltips could be optional, or keep them simple; we mainly need a static line). If using Chart.js, turn off background grid or tooltips if not needed to improve performance and clarity.
* **Slider Component:** Implement the vertical range slider using an existing React component or by extending an HTML `<input type="range">`. Key libraries/approaches:

  * **rc-slider:** A well-known library that supports range selection with two handles. It can be configured for vertical orientation (`vertical={true}`) and given a min, max (0 to 100) and an initial range. rc-slider allows custom styling via CSS classes which we can adapt to Tailwind by overriding the styles (or by using Tailwind’s `@apply` in a CSS file for slider classes).
  * **React Range (react-range):** A lightweight library that provides a headless range slider logic. You provide your own render for the slider track and thumbs, which could work well with Tailwind for full customization. It supports multiple thumbs and vertical orientation as well.
  * **Material-UI Slider:** If the project already uses MUI or if you don’t mind adding it, their `<Slider>` component natively supports range (pass an array value) and a `orientation="vertical"` prop. It would come with default styling that might need to be overridden to match the game’s look (or you can use MUI’s theming).
  * Whichever solution, ensure to tie the slider’s onChange to update state for min and max values, and recalculate the win chance/multiplier accordingly. The slider should be smooth and not too sensitive (consider debouncing the updates if performance becomes an issue with the chart re-rendering too often, though likely it’s fine to update in real-time).
* **Gauge/Risk Meter:** You can implement the risk gauge either through a small library or custom:

  * A simple approach is to use an **SVG arc** or a `<canvas>` to draw an arc based on the risk percentage. For example, an SVG circle with a stroke can act as a gauge by adjusting the stroke-dasharray to show a portion of the circle filled. This can be done with a little math (percentage of circumference = risk level). The color of the arc can interpolate from green to red. This custom approach might be achieved with a React component that takes a value (0 to 100% risk) as prop.
  * If preferring a library, `react-gauge-chart` (npm) can render a semi-circular gauge with some customization (colors, arcs). There’s also `react-canvas-gauge` or using a chart library like **ApexCharts** or **Highcharts** which have gauge chart types. However, bringing a heavy chart library just for one gauge might be overkill – a lightweight custom SVG is likely sufficient.
  * Ensure the gauge updates on slider change. If using custom code, use React state to store the current risk level and update the SVG attributes accordingly in the render. If using a library component, just pass it the calculated risk value as a prop.
* **State Management:** The game’s interactive elements can be handled with React’s local state and context:

  * Use `useState` hooks for things like the current range selection, the current bet amount, and the list of past results for the chart.
  * On "Place Bet", calculate outcome and then update the results array state.
  * Given the simplicity, external state libraries (Redux, MobX, etc.) are not necessary. Keep state within a top-level Game component and pass down props to child components (or use context for deeply nested ones).
  * If at any point the state management grows (like adding user balances, etc.), you might introduce context or Redux, but for now it’s likely not needed.
* **Utility Libraries:** You might use small utilities for convenience:

  * A library for random number generation is not needed (Math.random suffices), but if you want reproducibility in tests, consider seeding (could use `seedrandom` for pseudo-random with seeds, not critical unless needed).
  * For formatting numbers (like ensuring two decimals or adding currency symbols), a library like `numeral.js` or simply toLocaleString can be used.
  * No backend integration is expected in this spec, so no need for axios/fetch aside from maybe loading initial data (which we don’t have in this offline game context). All logic is client-side.

## Additional Considerations

* **Manual Play Only:** This implementation is single-round and manual. There is no auto-betting or autoplay feature in this version. The player must initiate each round by clicking "Place Bet". Ensure that after a round finishes, the UI is ready for the next input (re-enable the button, etc.). If needed in the future, an auto-play or repeating bet function could be added, but it’s out of scope for now.
* **Simulation Control:** Since we are not using provably fair logic, the randomness is under our control. This means for testing or demo purposes, we could allow certain tweaks:

  * You might implement a debug mode where the next outcome is known or can be set (to demonstrate win vs loss scenarios predictably). This is optional but can help during development.
  * In production, ensure the RNG is fair (uniform). Even without cryptographic proof, the distribution should not be biased. Using built-in random is fine; just be careful if using something like `Math.random()*100` to floor it properly for equal probability of each integer.
* **Outcome Visualization:** Beyond the chart, consider how to make the moment of result reveal exciting:

  * Some implementations might show an actual **dice image or number** spinning before settling on the result. While not described in the core spec, adding a small animation or visual flourish (like a rolling dice icon or a flicker effect on the graph) can enhance user experience. This could be a nice-to-have if time permits.
  * At minimum, use the chart animation and a clear textual cue (as mentioned in the right panel) to convey the result. Possibly flash the background or border in green for a win or red for a loss briefly to draw attention.
* **Historical Data Limits:** Decide how many past results to show on the chart. Too many points can clutter the UI and slow down rendering. A reasonable default might be to display, say, the last 20 or 30 rounds on the chart:

  * You can implement this by slicing the state array of results to that length when rendering (or by removing old entries as new ones come in).
  * Optionally, provide a UI control to adjust this (for example, a toggle or dropdown to switch between viewing last 20, 50, 100, or “all” results). This would be an enhancement for a more advanced interface. Initially, you can fix a number or auto-scale the x-axis to show all and trust that performance is okay if usage is moderate.
* **Edge Cases & Validation:**

  * Ensure that the multiplier calculation handles integer division or floating point correctly. If a range of size 33 is chosen (33% win chance), 100/33 = 3.03×, which is fine to show. If a very narrow range like 1 is chosen, 100/1 = 100× (which matches the expected 100 outcomes). If using 0–100 inclusive (101 outcomes), a 1-range would be 100/1% = 100× still roughly; the off-by-one isn't huge but be consistent with how you count the range size (i.e., inclusive range width = max-min+1 if using integers).
  * Validate the bet amount input. It should not allow negative or extremely large values. Possibly enforce a maximum (if the game is meant for real money, there’d be a max bet). In this simulation, you can set an arbitrary max (like 1000) to prevent outrageous numbers that might break the UI formatting. Also handle if the user clears the input (treat empty as 0 or reset to min).
  * If the user tries to place a bet with a 0 amount or with no range selected (though the range will always have some default, perhaps initially 0–100), handle that. The "Place Bet" button can be disabled unless bet > 0 and a valid range is set.
* **Modularity and Maintainability:** Organize the code so that each major piece is modular:

  * **Chart component:** encapsulate all logic for rendering the graph. It can receive props like `dataPoints` (array of numbers) and maybe a `highlightIndex` or `latestValue` to emphasize. The chart component shouldn’t need to know about bets or other game logic; it just displays the data given.
  * **Slider component:** handle the UI for range selection. It can internally manage the two values (minVal, maxVal) or accept them and an onChange callback from parent. This component can also calculate winChance% and multiplier and perhaps call `onRangeChange(min, max)` to inform the parent state. Alternatively, do calculations in parent and just use slider purely for input.
  * **RiskGauge component:** takes a risk value (or winChance) and renders the gauge accordingly.
  * **Control panel component:** contains the Bet input and Place Bet button, and displays text like win chance, multiplier, etc., possibly also the risk gauge if not separate. It triggers the onBet action when button is pressed.
  * By splitting this way, the front-end engineer can work on each piece somewhat in isolation and then integrate them in a parent `Game` component that holds the state (current range, bet, results array).
* **Testing:** Once implemented, test the game thoroughly:

  * Run through various slider settings and ensure the win chance and multiplier always make sense (especially at extremes like full range or very tiny range).
  * Test a few rounds to see that the chart plots correctly and that the animation looks good and doesn’t glitch with rapid successive plays.
  * Test on different screen sizes for responsiveness. Use your browser’s dev tools to simulate mobile devices and ensure the layout changes take effect as described.
  * If possible, perform a quick user test or heuristic evaluation: is it clear to a new user how to play? If needed, add small instructions or labels (for example, a label "Select Range" near the slider, or placeholder text in bet input).
* **Future Enhancements:** Although not required now, the architecture should allow adding features later without much refactoring. For example:

  * Implementing a **Provably Fair** mechanism (would involve getting a server seed or using a client seed hash etc.) – since we isolated game logic, this can replace the RNG step when needed.
  * Adding an **auto-bet** mode (could loop the play action with certain conditions) – the state and loop would be managed in the parent, so the UI components largely remain same.
  * Introducing a **balance system** and win/loss affecting user’s credits – can be added by maintaining a balance state that deducts bet on play and adds payout on win.
  * These don’t affect the current build but it’s good to keep the code flexible for them.

By following this plan, a front-end engineer should be able to implement the **Dice Trading** game with a polished, responsive UI and robust interactive behavior. The result will be a compelling game interface where users can visually see their risk and reward, adjust their strategy via the slider, and enjoy an animated outcome each round, much like the Turbo Games inspiration but tailored to our simplified dice logic.
