import React, { useEffect, useState, useCallback, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { BrowseIcon, CasinoIcon, BetsIcon, SportsIcon, ChatIcon } from '../components/MobileNavigationIcons';
import { useProvablyFair } from '@/hooks/use-provably-fair';
import { useGameBet } from '@/hooks/use-game-bet';
import { useWallet } from '@/context/WalletContext';
import { useToast } from '@/hooks/use-toast';

// Component for Limbo game based on the reference screenshots
const LimboFinal: React.FC = () => {
  // Game state
  const [gameMode, setGameMode] = useState<'Manual' | 'Auto'>('Manual');
  const [betAmount, setBetAmount] = useState<number>(10.00);
  const [betAmountDisplay, setBetAmountDisplay] = useState<string>("10.00");
  const [targetMultiplier, setTargetMultiplier] = useState<number>(2.00);
  const [winChance, setWinChance] = useState<number>(49.5);
  const [currentMultiplier, setCurrentMultiplier] = useState<number>(1.00);
  const [numberBets, setNumberBets] = useState<number>(0);
  const [onWinIncrease, setOnWinIncrease] = useState<number>(0);
  const [onLossIncrease, setOnLossIncrease] = useState<number>(0);
  const [stopOnProfit, setStopOnProfit] = useState<number>(0);
  const [stopOnLoss, setStopOnLoss] = useState<number>(0);
  const [autoRunning, setAutoRunning] = useState<boolean>(false);
  const [isWon, setIsWon] = useState<boolean | null>(null);
  const [isAnimating, setIsAnimating] = useState<boolean>(false);
  const [betHistory, setBetHistory] = useState<Array<{multiplier: number, won: boolean}>>([]);
  
  // Hooks for actual game logic
  const { getGameResult } = useProvablyFair('limbo');
  const { balance, symbol, refreshBalance } = useWallet();
  const { placeBet: placeGameBet, completeBet: completeGameBet } = useGameBet(3); // Limbo gameId is 3
  const { toast } = useToast();
  
  // Fixed game info for Limbo
  const gameInfo = {
    id: 3,
    name: "LIMBO",
    slug: "limbo",
    type: "STAKE ORIGINALS",
    description: "Target a multiplier and win big",
    minBet: 0.00000001,
    maxBet: 100,
    rtp: 99
  };
  
  // Ref for autobet interval
  const autoBetIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const currentBetIdRef = useRef<number | null>(null);
  
  // Quick multiplier options with dynamic highlighting for profitable options
  const isProfitable = (multiplier: number) => {
    // Profitable multipliers generally have better expected value
    // In this game, higher multipliers (2.0+) are considered more profitable
    return multiplier >= 2.0;
  };
  
  const quickMultipliers = [
    { value: 1.00, label: "1.00x", highlight: isProfitable(1.00) },
    { value: 1.25, label: "1.25x", highlight: isProfitable(1.25) },
    { value: 1.07, label: "1.07x", highlight: isProfitable(1.07) },
    { value: 1.56, label: "1.56x", highlight: isProfitable(1.56) },
    { value: 12.13, label: "12.13x", highlight: isProfitable(12.13) },
    { value: 2.00, label: "2.00x", highlight: isProfitable(2.00) },
    { value: 1.19, label: "1.19x", highlight: isProfitable(1.19) },
    { value: 4.12, label: "4.12x", highlight: isProfitable(4.12) },
    { value: 1.25, label: "1.25x", highlight: isProfitable(1.25) },
    { value: 2.89, label: "2.89x", highlight: isProfitable(2.89) }
  ];
  
  // Format number with up to 8 decimal places
  const formatNumber = (num: number): string => {
    return num.toFixed(8).replace(/\.?0+$/, '');
  };
  
  // Clean up autobet on unmount
  useEffect(() => {
    return () => {
      if (autoBetIntervalRef.current) {
        clearInterval(autoBetIntervalRef.current);
      }
    };
  }, []);
  
  // Calculate the win chance based on target multiplier
  useEffect(() => {
    // Formula: Win Chance (%) = (1 / Target Multiplier) * (100 - House Edge)
    // Where House Edge is 1%
    const chance = ((1 / targetMultiplier) * 99);
    setWinChance(Number(chance.toFixed(8)));
  }, [targetMultiplier]);
  
  // Update displayed bet amount when changed
  useEffect(() => {
    setBetAmountDisplay(betAmount.toFixed(8));
  }, [betAmount]);

  // Handle bet amount changes
  const handleBetAmountChange = (value: string) => {
    const newAmount = parseFloat(value);
    if (!isNaN(newAmount) && newAmount >= 0) {
      setBetAmount(newAmount);
      setBetAmountDisplay(value);
    } else if (value === '' || value === '0') {
      setBetAmount(0);
      setBetAmountDisplay(value);
    }
  };
  
  // Half bet amount
  const halfBet = () => {
    const newAmount = betAmount / 2;
    setBetAmount(newAmount);
    setBetAmountDisplay(newAmount.toFixed(8));
  };
  
  // Double bet amount
  const doubleBet = () => {
    const newAmount = betAmount * 2;
    setBetAmount(newAmount);
    setBetAmountDisplay(newAmount.toFixed(8));
  };
  
  // Animate multiplier reveal
  const animateMultiplier = useCallback((finalMultiplier: number, duration: number = 800) => {
    setIsAnimating(true);
    
    let startValue = 1.00;
    const startTime = Date.now();
    
    const animate = () => {
      const elapsedTime = Date.now() - startTime;
      const progress = Math.min(elapsedTime / duration, 1);
      
      // Easing function for smooth animation
      const easeOut = 1 - Math.pow(1 - progress, 3);
      const currentValue = startValue + (finalMultiplier - startValue) * easeOut;
      
      setCurrentMultiplier(parseFloat(currentValue.toFixed(2)));
      
      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        // Animation complete
        setCurrentMultiplier(finalMultiplier);
        setIsAnimating(false);
        setIsWon(finalMultiplier >= targetMultiplier);
        
        // Add to history
        setBetHistory(prev => [
          { 
            multiplier: finalMultiplier, 
            won: finalMultiplier >= targetMultiplier 
          }, 
          ...prev.slice(0, 9)
        ]);
      }
    };
    
    requestAnimationFrame(animate);
  }, [targetMultiplier]);
  
  // Generate client seed
  const generateClientSeed = () => {
    return Math.random().toString(36).substring(2, 15);
  };
  
  // Handle single bet (Manual mode)
  const handleManualBet = async () => {
    if (isAnimating) return;
    
    // Validate bet amount
    if (betAmount <= 0) {
      toast({
        title: "Invalid Bet",
        description: "Please enter a valid bet amount",
        variant: "destructive"
      });
      return;
    }
    
    // Check if player has enough balance
    if (betAmount > balance) {
      toast({
        title: "Insufficient Balance",
        description: "You don't have enough funds to place this bet",
        variant: "destructive"
      });
      return;
    }
    
    try {
      console.log("Placing Limbo bet with:", {
        amount: betAmount,
        targetMultiplier: targetMultiplier
      });
      
      // Place bet using our unified wallet system
      const response = await placeGameBet({
        amount: betAmount,
        options: {
          targetMultiplier: targetMultiplier
        },
        autoCashout: null
      });
      
      if (!response || !response.betId) {
        throw new Error("Failed to place bet");
      }
      
      // Store the bet ID for later use
      currentBetIdRef.current = response.betId;
      console.log("Bet placed successfully with ID:", response.betId);
      
      // Generate game result using provably fair mechanism
      const result = getGameResult() as number;
      const limboResult = parseFloat(result.toFixed(2));
      
      // Animate the multiplier
      animateMultiplier(limboResult);
      
      // Create outcome object
      const outcome = {
        targetMultiplier,
        result: limboResult,
        win: limboResult >= targetMultiplier
      };
      
      // Complete the bet after animation
      setTimeout(() => {
        if (currentBetIdRef.current) {
          try {
            // Complete the bet with our wallet system
            completeGameBet(currentBetIdRef.current, {
              win: outcome.win,
              multiplier: outcome.win ? targetMultiplier : 0,
              payout: outcome.win ? betAmount * targetMultiplier : 0,
              result: limboResult
            });
            
            // Update UI
            if (outcome.win) {
              toast({
                title: "You Won!",
                description: `You won ${symbol}${(betAmount * targetMultiplier).toFixed(2)}!`,
                variant: "default"
              });
            }
            
            // Refresh the wallet balance
            refreshBalance();
            
            console.log("Bet completed:", outcome);
          } catch (error) {
            console.error("Error completing bet:", error);
          }
          currentBetIdRef.current = null;
        }
      }, 1000);
      
    } catch (error) {
      console.error('Error placing bet:', error);
      toast({
        title: "Error",
        description: "An error occurred while placing your bet",
        variant: "destructive"
      });
    }
  };
  
  // Move toggleAutobet declaration before it's used
  const toggleAutobet = () => {
    if (autoRunning) {
      setAutoRunning(false);
      if (autoBetIntervalRef.current) {
        clearInterval(autoBetIntervalRef.current);
        autoBetIntervalRef.current = null;
      }
    } else {
      setAutoRunning(true);
      
      // Start with one bet immediately
      handleAutoBet();
      
      // Set up interval for subsequent bets
      autoBetIntervalRef.current = setInterval(() => {
        // Stop if we've reached the number of bets
        if (numberBets > 0 && betHistory.length >= numberBets) {
          toggleAutobet();
          return;
        }
        
        // Check profit/loss stop conditions
        // (In a real implementation, this would check actual profit/loss)
        
        // If not stopped by conditions, place another bet
        if (!isAnimating) {
          handleAutoBet();
        }
      }, 2000); // Wait 2 seconds between bets
    }
  };

  // Handle auto betting
  const handleAutoBet = useCallback(async () => {
    // Validate bet amount
    if (betAmount <= 0) {
      toast({
        title: "Invalid Bet",
        description: "Please enter a valid bet amount",
        variant: "destructive"
      });
      return;
    }
    
    // Check if player has enough balance
    if (betAmount > balance) {
      toast({
        title: "Insufficient Balance",
        description: "You don't have enough funds to place this bet",
        variant: "destructive"
      });
      if (autoRunning) {
        toggleAutobet(); // Stop auto betting
      }
      return;
    }
    
    try {
      console.log("Placing auto Limbo bet with:", {
        amount: betAmount,
        targetMultiplier: targetMultiplier
      });
      
      // Place bet using our unified wallet system
      const response = await placeGameBet({
        amount: betAmount,
        options: {
          targetMultiplier: targetMultiplier
        },
        autoCashout: null
      });
      
      if (!response || !response.betId) {
        throw new Error("Failed to place bet");
      }
      
      // Store the bet ID
      currentBetIdRef.current = response.betId;
      console.log("Auto bet placed successfully with ID:", response.betId);
      
      // Generate game result using provably fair mechanism
      const result = getGameResult() as number;
      const limboResult = parseFloat(result.toFixed(2));
      
      // Animate the multiplier
      animateMultiplier(limboResult);
      
      // Create outcome object
      const outcome = {
        targetMultiplier,
        result: limboResult,
        win: limboResult >= targetMultiplier
      };
      
      // Complete the bet after animation
      setTimeout(() => {
        if (currentBetIdRef.current) {
          try {
            // Complete the bet with our wallet system
            completeGameBet(currentBetIdRef.current, {
              win: outcome.win,
              multiplier: outcome.win ? targetMultiplier : 0,
              payout: outcome.win ? betAmount * targetMultiplier : 0,
              result: limboResult
            });
            
            // Refresh the wallet balance
            refreshBalance();
            
            console.log("Auto bet completed:", outcome);
            currentBetIdRef.current = null;
            
            // Adjust bet amount based on win/loss if set
            if (outcome.win && onWinIncrease > 0) {
              const newAmount = betAmount * (1 + onWinIncrease / 100);
              setBetAmount(parseFloat(newAmount.toFixed(2)));
            } else if (!outcome.win && onLossIncrease > 0) {
              const newAmount = betAmount * (1 + onLossIncrease / 100);
              setBetAmount(parseFloat(newAmount.toFixed(2)));
            }
          } catch (error) {
            console.error("Error completing auto bet:", error);
          }
        }
      }, 1000);
      
    } catch (error) {
      console.error('Error placing auto bet:', error);
      toast({
        title: "Error",
        description: "An error occurred while placing your bet",
        variant: "destructive"
      });
    }
  }, [betAmount, targetMultiplier, onWinIncrease, onLossIncrease, getGameResult, animateMultiplier, placeGameBet, completeGameBet, refreshBalance, balance, autoRunning, toast]);
  
  // Get color for multiplier based on value
  const getMultiplierColor = () => {
    if (currentMultiplier <= 1.08) return 'text-[#FF3B3B]'; // Red for very low
    if (currentMultiplier < 1.5) return 'text-[#FF6B00]'; // Orange for low
    if (currentMultiplier < 2.0) return 'text-[#FFA800]'; // Yellow-orange for medium-low
    if (currentMultiplier < 10) return 'text-[#5BE12C]';  // Green for medium
    return 'text-[#49E]';  // Blue for high
  };
  
  return (
    <div className="flex flex-col h-screen w-full bg-[#0F212E] text-white overflow-hidden">
      {/* Main Game Container */}
      <div className="flex flex-col md:flex-row h-full">
        {/* Left Side - Game Area */}
        <div className="w-full md:w-3/4 p-4 flex flex-col h-full">
          {/* Quick Multiplier Buttons */}
          <div className="flex overflow-x-auto gap-2 py-2 mb-4">
            {quickMultipliers.map((mult, i) => (
              <button
                key={i}
                className={`shrink-0 px-3 py-1 rounded-full text-xs font-semibold ${
                  mult.highlight ? 'bg-[#5BE12C] text-black' : 'bg-[#172B3A]'
                }`}
                onClick={() => setTargetMultiplier(mult.value)}
              >
                {mult.label}
              </button>
            ))}
          </div>
          
          {/* Main Game Display Area */}
          <div className="relative flex-grow bg-[#0E1C27] rounded-lg flex items-center justify-center overflow-hidden">
            {/* Notification banner for autobet */}
            {autoRunning && (
              <div className="absolute top-4 left-4 bg-[#172B3A] text-white px-3 py-1 rounded-lg flex items-center">
                <span className="text-green-400 mr-2">✓</span>
                <span className="text-sm">Autobet started</span>
                <button className="ml-4 text-gray-400" onClick={toggleAutobet}>&times;</button>
              </div>
            )}
            

            {/* Center Multiplier Display */}
            <div className="text-center">
              <div className={`text-9xl font-bold ${getMultiplierColor()}`}>
                {currentMultiplier.toFixed(2)}×
              </div>
            </div>
            
            {/* Bottom Info Box */}
            <div className="absolute bottom-4 inset-x-4">
              <div className="bg-[#172B3A] rounded-lg p-4 flex justify-between">
                <div>
                  <div className="text-sm text-gray-400 mb-1">Target Multiplier</div>
                  <div className="flex items-center">
                    <input 
                      type="number" 
                      min="1.01"
                      step="0.01"
                      value={targetMultiplier}
                      onChange={(e) => setTargetMultiplier(Math.max(1.01, Number(e.target.value)))}
                      className="bg-transparent w-20 text-white text-lg border-none outline-none"
                    />
                    <button className="text-gray-400 ml-2">&times;</button>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-sm text-gray-400 mb-1">Win Chance</div>
                  <div className="flex items-center justify-end">
                    <span className="text-white text-lg">{winChance.toFixed(8)}</span>
                    <span className="text-gray-400 ml-1">%</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Right Side - Controls - Optimized for mobile */}
        <div className="w-full md:w-1/4 p-2 bg-[#172B3A]">
          {/* Game Mode Tabs */}
          <div className="flex rounded-md overflow-hidden mb-2 bg-[#0F212E]">
            <button 
              className={`flex-1 py-1 text-center ${gameMode === 'Manual' ? 'bg-[#172B3A]' : ''}`}
              onClick={() => setGameMode('Manual')}
            >
              Manual
            </button>
            <button 
              className={`flex-1 py-1 text-center ${gameMode === 'Auto' ? 'bg-[#172B3A]' : ''}`}
              onClick={() => setGameMode('Auto')}
            >
              Auto
            </button>
          </div>
          
          {/* Simplified Bet Amount with Quick Amount Buttons */}
          <div className="mb-3">
            <div className="text-sm text-gray-400 mb-1">Bet Amount</div>
            <div className="bg-[#0F212E] p-2 rounded mb-2 relative">
              <input 
                type="text" 
                value={betAmountDisplay}
                onChange={(e) => handleBetAmountChange(e.target.value)}
                className="w-full bg-transparent border-none text-white outline-none text-center"
                placeholder="Enter amount"
              />
            </div>
            
            {/* Quick amount buttons in a grid */}
            <div className="grid grid-cols-4 gap-2 mb-2">
              <button 
                onClick={() => setBetAmount(100)}
                className="py-1 text-xs bg-[#0F212E] rounded-md text-white hover:bg-[#1a2c3d]"
              >
                100
              </button>
              <button 
                onClick={() => setBetAmount(500)}
                className="py-1 text-xs bg-[#0F212E] rounded-md text-white hover:bg-[#1a2c3d]"
              >
                500
              </button>
              <button 
                onClick={() => setBetAmount(1000)}
                className="py-1 text-xs bg-[#0F212E] rounded-md text-white hover:bg-[#1a2c3d]"
              >
                1000
              </button>
              <button 
                onClick={() => setBetAmount(5000)}
                className="py-1 text-xs bg-[#0F212E] rounded-md text-white hover:bg-[#1a2c3d]"
              >
                5000
              </button>
            </div>
            
            {/* Additional larger bet amount */}
            <div className="mb-2">
              <button 
                onClick={() => setBetAmount(10000)}
                className="w-full py-1 text-xs bg-[#0F212E] rounded-md text-white hover:bg-[#1a2c3d]"
              >
                10000
              </button>
            </div>
            
            {/* Half and Double buttons in one row */}
            <div className="grid grid-cols-2 gap-2">
              <button 
                onClick={halfBet}
                className="py-1 text-xs bg-[#0F212E] rounded-md text-white hover:bg-[#1a2c3d]"
              >
                ½
              </button>
              <button 
                onClick={doubleBet}
                className="py-1 text-xs bg-[#0F212E] rounded-md text-white hover:bg-[#1a2c3d]"
              >
                2×
              </button>
            </div>
          </div>
          
          {/* Target Multiplier - Always visible */}
          <div className="mb-3">
            <div className="text-sm text-gray-400 mb-1">Target Multiplier</div>
            <div className="bg-[#0F212E] p-2 rounded mb-1 relative flex items-center">
              <input 
                type="number" 
                min="1.01"
                step="0.01"
                value={targetMultiplier}
                onChange={(e) => setTargetMultiplier(Math.max(1.01, parseFloat(e.target.value)))}
                className="w-full bg-transparent border-none text-white outline-none text-center"
              />
            </div>
            <div className="text-xs text-gray-400 text-center">
              Win Chance: {winChance.toFixed(2)}%
            </div>
          </div>
          
          {/* Only show simple number of bets in Auto mode */}
          {gameMode === 'Auto' && (
            <div className="mb-3">
              <div className="text-sm text-gray-400 mb-1">Number of Bets</div>
              <div className="bg-[#0F212E] p-2 rounded flex items-center justify-between">
                <input 
                  type="number"
                  min="0" 
                  value={numberBets}
                  onChange={(e) => setNumberBets(Math.max(0, parseInt(e.target.value) || 0))}
                  className="w-full bg-transparent border-none text-white outline-none text-center"
                  placeholder="∞"
                />
                <button 
                  onClick={() => setNumberBets(0)}
                  className="px-2 text-gray-400 hover:text-white"
                >
                  ∞
                </button>
              </div>
            </div>
          )}
          
          {/* Action Button */}
          <div className="mb-3">
            {gameMode === 'Manual' ? (
              <Button 
                className="w-full py-3 text-base font-medium bg-[#5BE12C] hover:bg-[#4CC124] text-black rounded-md"
                onClick={handleManualBet}
                disabled={isAnimating || betAmount <= 0}
              >
                Bet
              </Button>
            ) : (
              <Button 
                className={`w-full py-3 text-base font-medium ${
                  autoRunning 
                    ? 'bg-[#FF6B00] hover:bg-[#FF8F3F]' 
                    : 'bg-[#5BE12C] hover:bg-[#4CC124] text-black'
                } rounded-md`}
                onClick={toggleAutobet}
                disabled={betAmount <= 0}
              >
                {autoRunning ? 'Stop Autobet' : 'Start Autobet'}
              </Button>
            )}
          </div>
          
          {/* Advanced Settings Button - Only in Auto mode */}
          {gameMode === 'Auto' && (
            <details className="bg-[#0F212E] rounded p-2 mb-3">
              <summary className="text-sm font-medium cursor-pointer text-white">
                Advanced Settings
              </summary>
              <div className="pt-2 space-y-3">
                {/* On Win */}
                <div>
                  <div className="text-xs text-gray-400 mb-1">On Win (%)</div>
                  <div className="flex">
                    <button 
                      className="bg-[#172B3A] px-2 py-1 rounded-l text-xs"
                      onClick={() => setOnWinIncrease(0)}
                    >
                      0%
                    </button>
                    <input 
                      type="number" 
                      min="0"
                      max="100"
                      value={onWinIncrease}
                      onChange={(e) => setOnWinIncrease(Math.max(0, Number(e.target.value)))}
                      className="flex-1 bg-[#172B3A] py-1 border-none text-white text-center outline-none text-xs"
                    />
                  </div>
                </div>
                
                {/* On Loss */}
                <div>
                  <div className="text-xs text-gray-400 mb-1">On Loss (%)</div>
                  <div className="flex">
                    <button 
                      className="bg-[#172B3A] px-2 py-1 rounded-l text-xs"
                      onClick={() => setOnLossIncrease(0)}
                    >
                      0%
                    </button>
                    <input 
                      type="number"
                      min="0" 
                      max="100"
                      value={onLossIncrease}
                      onChange={(e) => setOnLossIncrease(Math.max(0, Number(e.target.value)))}
                      className="flex-1 bg-[#172B3A] py-1 border-none text-white text-center outline-none text-xs"
                    />
                  </div>
                </div>
                
                {/* Stop Conditions */}
                <div>
                  <div className="text-xs text-gray-400 mb-1">Stop on Profit</div>
                  <input 
                    type="number"
                    min="0"
                    value={stopOnProfit}
                    onChange={(e) => setStopOnProfit(Math.max(0, Number(e.target.value)))}
                    className="w-full bg-[#172B3A] p-1 rounded border-none text-white outline-none text-xs"
                  />
                </div>
                
                <div>
                  <div className="text-xs text-gray-400 mb-1">Stop on Loss</div>
                  <input 
                    type="number"
                    min="0"
                    value={stopOnLoss}
                    onChange={(e) => setStopOnLoss(Math.max(0, Number(e.target.value)))}
                    className="w-full bg-[#172B3A] p-1 rounded border-none text-white outline-none text-xs"
                  />
                </div>
              </div>
            </details>
          )}
        </div>
      </div>
      
      {/* Mobile Navigation (hidden on desktop) */}
      <div className="fixed bottom-0 inset-x-0 bg-[#0E1C27] flex justify-between border-t border-gray-800 md:hidden py-2">
        <button className="flex-1 flex flex-col items-center justify-center gap-1">
          <BrowseIcon />
          <span className="text-xs text-gray-400">Browse</span>
        </button>
        <button className="flex-1 flex flex-col items-center justify-center gap-1">
          <CasinoIcon />
          <span className="text-xs text-white">Casino</span>
        </button>
        <button className="flex-1 flex flex-col items-center justify-center gap-1">
          <BetsIcon />
          <span className="text-xs text-gray-400">Bets</span>
        </button>
        <button className="flex-1 flex flex-col items-center justify-center gap-1">
          <SportsIcon />
          <span className="text-xs text-gray-400">Sports</span>
        </button>
        <button className="flex-1 flex flex-col items-center justify-center gap-1">
          <ChatIcon />
          <span className="text-xs text-gray-400">Chat</span>
        </button>
      </div>
    </div>
  );
};

export default LimboFinal;